//    Asterisk microprogram tree
//    Copyright (C) 2009-2014 Dmitry Svyatogorov ds@vo-ix.ru

//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Example AEL config file
//
//
// Static extension configuration file, used by
// the pbx_ael module. This is where you configure all your
// inbound and outbound calls in Asterisk.
//
// This configuration file is reloaded
// - With the "ael reload" command in the CLI
// - With the "reload" command (that reloads everything) in the CLI

// The "Globals" category contains global variables that can be referenced
// in the dialplan by using the GLOBAL dialplan function:
//  ${GLOBAL(VARIABLE)}
// ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
// Unix/Linux environmental variables are reached with the ENV dialplan
// function: ${ENV(VARIABLE)}
//

globals {
 PBXSERVER=ORD_TEL_MEDIA_02;
 DEFAULT_LANG=ru;  // Default language for new channels
 TRANSFER_CONTEXT=transfer;
 RHOMBUS_TYPE=enterprise;
// MONITOR_EXEC=/usr/bin/sox -M;
//MONITOR_EXEC=/usr/local/sbin/2wav2mp3;
 __DYNAMIC_FEATURES=park;
//	CONSOLE="Console/dsp"; 		// Console interface for demo
	//CONSOLE=DAHDI/1
	//CONSOLE=Phone/phone0
//	IAXINFO=guest;				// IAXtel username/password
	//IAXINFO="myuser:mypass";
//	TRUNK="DAHDI/g1";					// Trunk interface
	//
	// Note the 'G2' in the TRUNK variable above. It specifies which group (defined
	// in dahdi.conf) to dial, i.e. group 2, and how to choose a channel to use in
	// the specified group. The four possible options are:
	//
	// g: select the lowest-numbered non-busy DAHDI channel
	//    (aka. ascending sequential hunt group).
	// G: select the highest-numbered non-busy DAHDI channel
	//    (aka. descending sequential hunt group).
	// r: use a round-robin search, starting at the next highest channel than last
	//    time (aka. ascending rotary hunt group).
	// R: use a round-robin search, starting at the next lowest channel than last
	//    time (aka. descending rotary hunt group).
	//
	//TRUNKMSD=1;					// MSD digits to strip (usually 1 or 0)
	//TRUNK=IAX2/user:pass@provider
};

//
// Any category other than "General" and "Globals" represent
// extension contexts, which are collections of extensions.
//
// Extension names may be numbers, letters, or combinations
// thereof. If an extension name is prefixed by a '_'
// character, it is interpreted as a pattern rather than a
// literal.  In patterns, some characters have special meanings:
//
//   X - any digit from 0-9
//   Z - any digit from 1-9
//   N - any digit from 2-9
//   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
//   . - wildcard, matches anything remaining (e.g. _9011. matches
//	anything starting with 9011 excluding 9011 itself)
//   ! - wildcard, causes the matching process to complete as soon as
//       it can unambiguously determine that no other matches are possible
//
// For example the extension _NXXXXXX would match normal 7 digit dialings,
// while _1NXXNXXXXXX would represent an area code plus phone number
// preceded by a one.
//
// Each step of an extension is ordered by priority, which must
// always start with 1 to be considered a valid extension.  The priority
// "next" or "n" means the previous priority plus one, regardless of whether
// the previous priority was associated with the current extension or not.
// The priority "same" or "s" means the same as the previously specified
// priority, again regardless of whether the previous entry was for the
// same extension.  Priorities may be immediately followed by a plus sign
// and another integer to add that amount (most useful with 's' or 'n').
// Priorities may then also have an alias, or label, in
// parenthesis after their name which can be used in goto situations
//
// Contexts contain several lines, one for each step of each
// extension, which can take one of two forms as listed below,
// with the first form being preferred.  One may include another
// context in the current one as well, optionally with a
// date and time.  Included contexts are included in the order
// they are listed.
//
//context name {
//	exten-name => {
//		application(arg1,arg2,...);
//
// 	Timing list for includes is
//
//   <time range>|<days of week>|<days of month>|<months>
//
//	includes {
//		daytime|9:00-17:00|mon-fri|*|*;
//      };
//
// 	ignorepat can be used to instruct drivers to not cancel dialtone upon
// 	receipt of a particular pattern.  The most commonly used example is
// 	of course '9' like this:
//
//	ignorepat => 9;
//
// 	so that dialtone remains even after dialing a 9.
//};

// Functions for ODBC_FUNC
#include "/etc/asterisk/func.ael"

// DialPlan processing contexts

context parkedcalls {
 _000 => {
  ParkAndAnnounce(PARKED,60,LOCAL/s@drop);
 }
}

context macro-parking {
// Parking from features.conf application "park"
 s => {
//  Transfer(s@intercom);
  ParkOnly(60);
//  Dial(LOCAL/00@parkedcalls/n,300);
//  NoOp(${CHANNEL(state)});
//  SendText(Sample);
 }
}

context drop {
 s => {
  Hangup(1);
 }
 _x. => {
  if ("${EXTEN}"="18") {
   Set(DIALSTATUS=CONGESTION);
   Set(HANGUPCAUSE=18);
  }
  Hangup(${EXTEN});
 }
}

// Devices state hints for BLF and Pickup() support
#include "/etc/asterisk/blf.ael"
// N-WAY conferencing
#include "/etc/asterisk/conference.ael"
// Dynamic MENU's
#include "/etc/asterisk/menu.ael"
#include "ael/*.ael"
#include "ael/func/*.ael"
