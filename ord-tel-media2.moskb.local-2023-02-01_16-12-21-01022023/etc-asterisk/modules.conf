;
; Asterisk configuration file
;
; Module Loader configuration file
;

[modules]
autoload=yes
;
; Any modules that need to be loaded before the Asterisk core has been
; initialized (just after the logger has been initialized) can be loaded
; using 'preload'. This will frequently be needed if you wish to map all
; module configuration files into Realtime storage, since the Realtime
; driver will need to be loaded before the modules using those configuration
; files are initialized.
;
; An example of loading ODBC support would be:
;preload => res_odbc.so
;preload => res_config_odbc.so
;
; res_phoneprov requires func_strings.so to be loaded:
preload => func_strings.so
preload => res_timing_dahdi.so;
preload => res_odbc.so
preload => res_config_odbc.so

; Uncomment the following if you wish to use the Speech Recognition API
;preload => res_speech.so
;
; If you want, load the GTK console right away.
;
noload => pbx_gtkconsole.so
;load => pbx_gtkconsole.so
;
load => res_musiconhold.so
;
; Load one of: chan_oss, alsa, or console (portaudio).
; By default, load chan_oss only (automatically).
;
;noload => chan_alsa.so
noload => chan_oss.so
noload => chan_console.so
;
;
; Only load one timing interface.  If DAHDI is available, use that as it will
; provide the best results.
;
;noload => res_timing_dahdi.so
noload => res_timing_pthread.so
;noload => res_fax.so
noload => cdr_radius.so
; Load it manually, when needed
noload => cel_pgsql.so
noload => cel_radius.so

noload => chan_mgcp.so
noload => chan_motif.so
noload => chan_skinny.so
noload => chan_unistim.so
noload => chan_pjsip.so
noload => chan_iax2.so
;noload => res_pjsip.so
;noload => res_pjproject.so
;noload => res_phoneprov.so
;noload => res_pjsip_config_wizard.so
;noload => res_pjsip_outbound_publish.so
;noload => res_pjsip_pubsub.so
;noload => res_pjsip_session.so
;noload => res_sorcery_config.so
;noload => res_sorcery_astdb.so
;noload => res_sorcery_realtime.so
;noload => res_sorcery_memory.so
;noload => res_sorcery_memory_cache.so





















