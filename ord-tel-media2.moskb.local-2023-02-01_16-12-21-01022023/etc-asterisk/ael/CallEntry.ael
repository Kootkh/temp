// !!! OLD routing schema: common point for all calls
macro call-entry(from_context) { // Make some desitions upon new call
 catch h { // whitout a catch, dialplan stops execution on hangup !!!
//  Set(CDR(pbxserver)=${FILTER(0-9a-zA-Z\.\-,${SHELL(hostname)})});
  Set(CDR(pbxserver)=${PBXSERVER});
  hang=1;
  return;
 }





 NoOp(maxx call-entry 10: call from ${from_context} callerid(num) ${CALLERID(num)} callerid(name) ${CALLERID(name)} to ${EXTEN} );
// Set(CALLERID(name)=${FILTER(\x20-\x7E,${CALLERID(name)})});
// нужно убрать 0x22, 0x27(кавычки)
// NoOp(maxx call-entry 12: call after filter from ${from_context} callerid(num) ${CALLERID(num)} callerid(name) ${CALLERID(name)} to ${EXTEN});


 //DumpChan();
// Wait(3);

 if ("${cid}"=""|"${ALTER_CID}"="1") {
  Set(__cid=${FILTER(0-9+,${CALLERID(num)})});  // !!! TaxiTel dirty hack !!!
// NoOp(maxx: call-entry 21: cid ${cid});
  if ("${cid}"="") Set(__cid=${FILTER(0-9+,${CALLERID(name)})});
  if ("${CALLERID(num)}"="Anonymous") Set(__cid=Anonymous);
 } else {
  Set(__cid=${cid});
 }
//NoOp(maxx: call-entry 27: cid ${cid});

 if ("${SHARED(cid)}"!="") { // ChannelRedirect hack
  Set(__cid=${SHARED(cid)});
 } else {
  if ("${cid}"="") Set(__cid=${CALLERID(ani)}); // Last resort
 }

NoOp(maxx: call-entry 35: cid ${cid} dnid ${dnid} CALLERID(dnid) ${CALLERID(dnid)});

 

 Set(CHANNEL(language)=${DEFAULT_LANG});

 if ("${dnid}"="") {
    if ("${CUT(CALLERID(dnid),*,2)}"!="" & "${CUT(CALLERID(dnid),*,1)}"!="") {
        NoOp(maxx: call-entry: blf call cut dnid to exten);
        Set(__dnid=${CUT(CALLERID(dnid),*,2)});
    } else {
    Set(__dnid=${CALLERID(dnid)});
    }
}


 Set(from=${from_context});


//NoOp(maxx: call-entry 45: tag ${TAG});


 if ("${BIND}"="") {
  if ("${TAG}"="") {
   Set(__TAG=${CHANNEL(peername)});
   Set(LOCAL(ext)=${CUT(TAG,+,2)});
//   NoOp(maxx: ext ${ext});
   if ("${ext}"!="") {
    Set(__BIND=${CUT(TAG,+,1)});
    if ("${TRUST_CID}"!="1") Set(__cid=${ext});
   }
  }
 }
 NoOp(maxx: call-entry 59: ext ${ext} tag ${TAG});




 if ("${BIND}"="" & "${CUT(cid,+,1)}"!="" & "${TRUST_CID}"="1") {  // BIND in cid - hack
  Set(__BIND=${CUT(cid,+,1)});
  Set(__cid=${CUT(cid,+,2)});
 }

 if ("${CUT(dnid,+,2)}"!=""&"${CUT(dnid,+,1)}"!="") { // Dial "BIND+dnid" - reject BIND
  if ("${BIND}"="") Set(__BIND=${CUT(dnid,+,1)});
  if ("${dnid:0:1}"="!") Set(__BIND=${CUT(dnid:1,+,1)});
  Set(__dnid=${CUT(dnid,+,2-9)});
 }

 if ("${dnid}"="!!"|"${dnid}"="!!!") {  // Set "${leg2}"|"!${leg2}"
  Set(__dnid=${dnid:2}${leg2});
 }

//тут хня.
// NoOp(maxx: call-entry, dump before odbc_exten);





// NoOp(maxx: call-entry originated ${originated} from_context ${from_context} cid ${cid} guid ${CDR(guid)});

if (${LEN(${CDR(guid)})}=0) {

    if ("${originated}"="1" & "${from_context}"="originate") { //first leg of originated call
        Set(CDR(guid)=${ODBC_GUID(${BIND},${dnid})});
    } else {
        NoOp(maxx: call-entry: this is not the first leg of originated call);
        Set(CDR(guid)=${ODBC_GUID(${BIND},${cid})});
    }
    CELGenUserEvent(guid,${CDR(guid)});
}

    //DumpChan();


 //if ("${incoming}"="1" || ("${originated}"="1" & "${from_context}"!="originate")) { // Incoming route must NOT depend from CID here!


  if ("${incoming}"="1" || "${iax-in}"="1" || "${DISA}"="1") { // Incoming route must NOT depend from CID here!
    NoOp(maxx: call-entry: incoming or second leg of originated call);
     Set(HASH(ext)=${ODBC_EXTEN(${dnid},${BIND})});
        //DumpChan();
        if ("${HASH(ext,Exten)}"="") Set(HASH(ext)=${ODBC_EXTEN(!${dnid},${BIND})});
     } else {
        NoOp(maxx: call-entry: outgoing call);
        Set(HASH(ext)=${ODBC_EXTEN(${cid},${BIND})});
        //DumpChan();
        if ("${HASH(ext,Exten)}"="") {
            NoOp(maxx: call-entry: outgoing call, but HASH(ext,Exten) ${HASH(ext,Exten)});
            Set(HASH(ext)=${ODBC_EXTEN(!${cid},${BIND})});
        }
    }

if ("${DISA}"="1" && "${HASH(ext,BIND)}"!="") {
    Set(__BIND=${HASH(ext,BIND)});
}



// if ("${HASH(ext,Exten)}"="") Set(HASH(ext)=${ODBC_EXTEN(!,${BIND})});

// if ("${BIND}"="") Set(__BIND=${HASH(ext,BIND)});  // Last resort: BIND from Exten.



if ("${BIND}"="") {
    NoOp(maxx: call-entry: ODBC_EXTEN  BIND ${HASH(ext,BIND)} );
    Set(__BIND=${HASH(ext,BIND)});  // Last resort: BIND from Exten
}

//Wait(3);



 Set(CDR(x-domain)=${BIND});
 Set(CHANNEL(userfield)=${BIND});

 if (("${originated}"="") || ("${originated}"="1" & "${from_context}"="originate")) {
 Set(incoming=1); // By default, consider it is incoming call, but orginated are both outgoing
 }


// NoOp(maxx: incoming -> 0 if: HASH(ext,Exten) "${HASH(ext,Exten)}" cid "${cid}" );
 // If Exten+Type matches cid, consider it is outgoing call
 if ("${HASH(ext,Exten)}"="${cid}"|"${HASH(ext,Exten)}"="!${cid}") {
//  NoOp(maxx: TOUPPER(HASH(ext,Type))  "${TOUPPER(${HASH(ext,Type):0:${LEN(${from})}})}" TOUPPER(from) "${TOUPPER(${from})}");
  if ("${TOUPPER(${HASH(ext,Type):0:${LEN(${from})}})}"="${TOUPPER(${from})}") {
   Set(incoming=0);
   Set(__URLa=${ODBC_URL(${FILTER(0-9,${cid})},${BIND})});
   Set(__URLb=${ODBC_URL(${FILTER(0-9,${dnid})},${BIND})});
   &Event(egress,${CONTEXT});
//  выводим ивэнты туда, где уже сформирована дата!!!!!!!!!!!
  }
 } else {
   Set(__URLa=${ODBC_URL(${FILTER(0-9,${cid})},${BIND})});
   Set(__URLb=${ODBC_URL(${FILTER(0-9,${dnid})},${BIND})});
   &Event(ingress,${CONTEXT});
//  выводим ивэнты туда, где уже сформирована дата!!!!!!!!!!!
 }

 if ("${HASH(ext,MOH)}"!="") {
  Set(CHANNEL(musicclass)=${HASH(ext,MOH)});
 }
 if ("${HASH(ext,MonitorTo)}"!="") {
  Set(__MonitorTo=${HASH(ext,MonitorTo)});
 }
// NoOp(CIDX=${cid});
//if (${REGEX("^495[0-9]{7}$" ${cid})}=1) {

 Set(__dnid=${STRREPLACE(dnid,%23,#)});  // Asterisk permanent regression patch


 if (${REGEX("^${HASH(ext,ExternPrefix)}[0-9]\{2,28\}$" ${dnid})}) {

NoOp(maxx: callentry: dnid ${dnid} on exten is prefixed with ExternPrefix, which is set in exten attributes);
 Set(unprefdnid=${dnid:${LEN(${HASH(ext,ExternPrefix)})}});
 Set(citylenght=${MATH(10 - ${LEN(${HASH(ext,Region)})},i)});

     if (${LEN(${unprefdnid})} < 11 && ${LEN(${unprefdnid})} > ${citylenght}) {
            NoOp(maxx: callentry: dialed number is less than federal and more than city, cutting last digits to number: ${unprefdnid}, it's length is ${LEN(${unprefdnid})}, but citylenght is ${citylenght});
            Set(unprefdnid=${unprefdnid:0:${citylenght}});
            //NoOp(maxx: callentry: corrected number is: ${unprefdnid}, it's length is ${LEN(${unprefdnid})});
    }

//    if (${MATH(10 - ${LEN(${HASH(ext,Region)})},i)}=${LEN(${unprefdnid})} && ${LEN(${unprefdnid})} < 7) {
       if (${citylenght}=${LEN(${unprefdnid})} && ${LEN(${unprefdnid})} < 7) {

        NoOp(maxx: callentry end: this is countryside call, normalized dnid is 8${HASH(ext,Region)}${unprefdnid});
        Set(dnid=8${HASH(ext,Region)}${unprefdnid});

    } else {

        Set(dnid=${unprefdnid});

    }
}


    //DumpChan();

 return;
} // macro call-entry(from_context)
