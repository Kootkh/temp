; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=yes
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;;autofallthrough=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on an extensions reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=yes
;
; If priorityjumping is set to 'yes', then applications that support
; 'jumping' to a different priority based on the result of their operations
; will do so (this is backwards compatible behavior with pre-1.2 releases
; of Asterisk). Individual applications can also be requested to do this
; by passing a 'j' option in their arguments.
;
;priorityjumping=yes
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
;userscontext=default
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"

; The "Globals" category contains global variables that can be referenced
; in the dialplan with the GLOBAL dialplan function:
; ${GLOBAL(VARIABLE)}
; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
; Unix/Linux environmental variables can be reached with the ENV dialplan
; function: ${ENV(VARIABLE)}
;
[globals]
PBXSERVER=CELL_INTEGRA_MEDIA_03;
NREC=-1
;CONSOLE=Console/dsp				; Console interface for demo
;CONSOLE=Zap/1
;CONSOLE=Phone/phone0
;IAXINFO=guest					; IAXtel username/password
;IAXINFO=myuser:mypass
TRUNK=DAHDI/g1					; Trunk interface

;TRANSFER_CONTEXT=internal

; Note the 'G2' in the TRUNK variable above. It specifies which group (defined
; in zapata.conf) to dial, i.e. group 2, and how to choose a channel to use in
; the specified group. The four possible options are:
;
; g: select the lowest-numbered non-busy Zap channel
;    (aka. ascending sequential hunt group).
; G: select the highest-numbered non-busy Zap channel
;    (aka. descending sequential hunt group).
; r: use a round-robin search, starting at the next highest channel than last
;    time (aka. ascending rotary hunt group).
; R: use a round-robin search, starting at the next lowest channel than last
;    time (aka. descending rotary hunt group).
;
TRUNKMSD=0					; MSD digits to strip (usually 1 or 0)
;TRUNK=IAX2/user:pass@provider

;
; Any category other than "General" and "Globals" represent
; extension contexts, which are collections of extensions.
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches
;	anything starting with 9011 excluding 9011 itself)
;   ! - wildcard, causes the matching process to complete as soon as
;       it can unambiguously determine that no other matches are possible
;
; For example the extension _NXXXXXX would match normal 7 digit dialings,
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceded by a one.
;
; Each step of an extension is ordered by priority, which must
; always start with 1 to be considered a valid extension.  The priority
; "next" or "n" means the previous priority plus one, regardless of whether
; the previous priority was associated with the current extension or not.
; The priority "same" or "s" means the same as the previously specified
; priority, again regardless of whether the previous entry was for the
; same extension.  Priorities may be immediately followed by a plus sign
; and another integer to add that amount (most useful with 's' or 'n').
; Priorities may then also have an alias, or label, in
; parenthesis after their name which can be used in goto situations
;
; Contexts contain several lines, one for each step of each
; extension, which can take one of two forms as listed below,
; with the first form being preferred.
;
;[context]
;exten => someexten,{priority|label{+|-}offset}[(alias)],application(arg1,arg2,...)
;exten => someexten,{priority|label{+|-}offset}[(alias)],application,arg1|arg2...
;
; Included Contexts
;
; One may include another context in the current one as well, optionally with a
; date and time.  Included contexts are included in the order
; they are listed.
; The reason a context would include other contexts is for their
; extensions.
; The algorithm to find an extension is recursive, and works in this
; fashion:
;	 first, given a stack on which to store context references,
;           push the context to find the extension onto the stack...
;    a) Try to find a matching extension in the context at the top of
;       the stack, and, if found, begin executing the priorities
;       there in sequence.
;    b) If not found, Search the switches, if any declared, in
;       sequence.
;    c) If still not found, for each include, push that context onto
;       the top of the context stack, and recurse to a).
;    d) If still not found, pop the entry from the top of the stack;
;       if the stack is empty, the search has failed. If it's not,
;       continue with the next context in c).
; This is a depth-first traversal, and stops with the first context
; that provides a matching extension. As usual, if more than one
; pattern in a context will match, the 'best' match will win.
; Please note that that extensions found in an included context are
; treated as if they were in the context from which the search began.
; The PBX's notion of the "current context" is not changed.
; Please note that in a context, it does not matter where an include
; directive occurs. Whether at the top, or near the bottom, the effect
; will be the same. The only thing that matters is that if there is
; more than one include directive, they will be searched for extensions
; in order, first to last.
; Also please note that pattern matches (like _9XX) are not treated
; any differently than exact matches (like 987). Also note that the
; order of extensions in a context have no affect on the outcome.
;
; Timing list for includes is
;
;   <time range>|<days of week>|<days of month>|<months>
;
; Note that ranges may be specified to wrap around the ends.  Also, minutes are
; fine-grained only down to the closest even minute.
;
;include => daytime|9:00-17:00|mon-fri|*|*
;include => weekend|*|sat-sun|*|*
;include => weeknights|17:02-8:58|mon-fri|*|*
;
; ignorepat can be used to instruct drivers to not cancel dialtone upon
; receipt of a particular pattern.  The most commonly used example is
; of course '9' like this:
;
;ignorepat => 9
;
; so that dialtone remains even after dialing a 9.
;
;TIMEOUT(digit)=3

;[zap2]
;exten = _X.,1,Dial(IAX2/kor/${EXTEN},200)

;[iax2] ; Transfer all to ZAP
;exten = _X.,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}},200)

; FROM STAR2

[macro-playmessage]
; Answer, play defined message for calling user, then hangup
; Limit the number of simultaneous connections, hangup if limit exceeded
;   ${ARG1} - Filename to playback ("demo-thanks" by default)
;   ${ARG2} - Limit of simultaneous playback sessions (99 by default)
;   ${ARG3} - Limitation group ("playmessage" by default)
exten = s,1,Set(ARG3=${IF($[${EXISTS(${ARG3})}]?${ARG3}:playmessage)})
exten = s,n,Set(GROUP()=${ARG3})
exten = s,n,Set(ARG2=${IF($[${EXISTS(${ARG2})}]?${ARG2}:99)})
exten = s,n,GotoIf($[${GROUP_COUNT(${ARG3})} > ${ARG2}]?hang)
exten = s,n,Answer
exten = s,n,Set(ARG1=${IF($[${EXISTS(${ARG1})}]?${ARG1}:demo-thanks)})
exten = s,n,Playback(${ARG1})
exten = s,n(hang),HangUp

[macro-store_message]
; Store message for the number specified
;   ${ARG1} - Extension the message is to (boxnumber@context)
exten = s,1,VoiceMail(${ARG1})
exten = s,n,HangUp

[InterproductRobot]
; CALL FROM 322929[67]
; Press 1 to connect with sales departament (28942)
; Press 2 to connect with purchase&logistics departament (28944)
; Press 3 to connect with accountanting departament (28937)
; Press 4 to send fax (28931)
; Or press 0 or wait to connect with somebody :) (28930)
;
;exten = s,1,Set(TIMEOUT(digit)=1)
exten = s,1,Answer
;exten = s,n,setcallerid(28930)
; here must be an explanation message except of beep
;exten = s,n,Playback(demo-thanks)
exten = s,n,Background(interproduct-welcome)
exten = s,n,WaitExten(5)
exten = s,n,Background(interproduct-welcome)
exten = s,n,WaitExten(5)
exten = s,n,Background(interproduct-welcome)
exten = s,n,WaitExten(5)
exten = s,n,Set(CALLERID(dnid)=28930)
exten = s,n,Dial(LOCAL/${cid}-28930@out,300,fg)

exten = _[*],1,Background(extension)
exten = _[*],n,WaitExten(9)
exten = _[*],n,Set(CALLERID(dnid)=28930)
exten = _[*],n,Dial(LOCAL/${cid}-28930@out,300,fg)

; invalid extension dialed - PRI_CAUSE=unallocated number
exten = i,1,Set(CALLERID(dnid)=28930)
exten = i,n,Dial(LOCAL/${cid}-28930@out,300,fg)
;--- Izmenenie
;exten = _0,1,Set(CALLERID(dnis)=28930)
;exten = _0,n,Dial(LOCAL/${cid)-28930@out,300,fg)
; --- Izmenenie
exten = _1,1,Set(CALLERID(dnid)=28942)
exten = _1,n,Dial(LOCAL/${cid}-28942@out,300,fg)
exten = _2,1,Set(CALLERID(dnid)=28944)
exten = _2,n,Dial(LOCAL/${cid}-28944@out,300,fg)
exten = _3,1,Set(CALLERID(dnid)=28937)
exten = _3,n,Dial(LOCAL/${cid}-28937@out,300,fg)
exten = _4,1,Set(CALLERID(dnid)=28931)
exten = _4,n,Dial(LOCAL/${cid}-28931@out,300,fg)
;exten = _9,1,Goto(default,9583253,1)

[MiranRobot]
; Press 1 to fax (2018)
; Press 2 to leave message (max 2 minutes long), send to sveta@miran.ru
; Press 3 to call Support 28525
;
;exten = s,1,Set(TIMEOUT(digit)=1)
exten = s,1,Goto(${ARG1},1)
exten = ~~s~~,1,Goto(${ARG1},1)
; here must be an explanation message except of beep
;exten = s,n,Playback(demo-thanks)
exten = ex,1,Answer
exten = ex,n,Background(miran-welcome)
exten = ex,n,WaitExten(9)
exten = ex,n,HangUp

exten = _[*],1,Background(extension)
exten = _[*],n,WaitExten(9)
exten = _[*],n,HangUp

; invalid extension dialed - PRI_CAUSE=unallocated number
exten = i,1,NoOp(INVALID)
exten = i,n,Set(PRI_CAUSE=1)
exten = i,n,Playtones(busy)
exten = i,n,Busy()

; Enter the voice-mail menu
exten = vm/28531,1,VoiceMailMain(s28531@miran)
exten = vm,1,VoiceMailMain(28531@miran)
exten = vm,n,HangUp

;exten = _1,1,setcallerid(28599)
exten = _1,1,Set(CALLERID(dnid)=2018)
exten = _1,n,Dial(LOCAL/28599-2018@out,300,fg)

exten = _2,1,Macro(store_message,28531@miran)
;exten = _2,n,HangUp

;exten = _3,1,setcallerid(28599)
;exten = _3,n,Goto(default,89119101502,1)
exten = _3,1,Set(CALLERID(dnid)=28586)
;exten = _3,n,Dial(LOCAL/28599-28525@out,300,fg)
exten = _3,n,Set(CHANNEL(language)=ru)
exten = _3,n,Dial(LOCAL/28586@iax/n,300,TtKkfgA(trigger/support))

[aliases]
; Short call phonebook logic

; Wait for extension to re-enter
exten = s,1,Set(TIMEOUT(digit)=3)
exten = s,n,WaitExten(60,m(beep))
exten = s,n,HangUp

; Invalid (* or #)
exten = i,1,Playback(vm-no)
exten = i,n,Goto(s,1)

exten = _Z,1,Set(ID=${EXTEN})
exten = _Z,n,Answer
exten = _Z,n,Goto(call,1)

exten = _X.,1,Set(ID=${EXTEN})
exten = _X.,n,Answer
exten = _X.,n,GotoIf($[${REGEX("^[1-9][0-9]?$" ${ID})}=1]?call,1)
exten = _X.,n,GotoIf($[${REGEX("^[1-9][0-9]?#$" ${ID})}=1]?check,1)
exten = _X.,n,GotoIf($[${REGEX("^[1-9][0-9]?[*]$" ${ID})}=1]?erase,1)
exten = _X.,n,GotoIf($[${REGEX("^[1-9][0-9]?[*][0-9]+$" ${ID})}=1]?set,1)
exten = _X.,n,GotoIf($[${REGEX("^([1-9][0-9]?[*])\{2\}$" ${ID})}=1]?swap,1)
exten = _X.,n,GotoIf($[${REGEX("^[0-9]+$" ${ID})}=1]?internal,${ID},1)
exten = _X.,n,Playback(vm-no)
exten = _X.,n,Goto(s,1)

; CALL ALIAS FROM CELL (if exists)
exten = call,1,Set(KEY=${ID})
exten = call,n,Set(CID=${CALLERID(num)})
exten = call,n,Set(ALIAS=${DB(alias/${CID}_${KEY})})
exten = call,n,GotoIf($["_${ALIAS}" = "_"]?ne)
exten = call,n,Goto(internal,${ALIAS},1)
exten = call,n,Hangup
exten = call,n(ne),Playback(vm-no)
exten = call,n,Goto(s,1)

; CHECK ALIAS IN CELL
exten = check,1,Set(CID=${CALLERID(num)})
exten = check,n,Set(KEY=${CUT(ID,#,1)})
exten = check,n,Set(ALIAS=${DB(alias/${CID}_${KEY})})
exten = check,n,GotoIf($["_${ALIAS}" = "_"]?ne)
exten = check,n,SayDigits(${ALIAS})
exten = check,n,Goto(s,1)
exten = check,n(ne),Playback(vm-no)
exten = check,n,Goto(s,1)

; ERASE ALIAS FROM CELL
exten = erase,1,Set(CID=${CALLERID(num)})
exten = erase,n,Set(KEY=${CUT(ID,*,1)})
exten = erase,n,Set(ALIAS=${DB_DELETE(alias/${CID}_${KEY})})
exten = erase,n,GotoIf($["_${ALIAS}" = "_"]?ne)
exten = erase,n,SayDigits(${KEY})
exten = erase,n,Playback(vm-deleted)
exten = erase,n,Goto(s,1)
exten = erase,n(ne),Playback(vm-no)
exten = erase,n,Goto(s,1)

; SET ALIAS TO CELL
exten = set,1,Set(CID=${CALLERID(num)})
exten = set,n,Set(KEY=${CUT(ID,*,1)})
exten = set,n,Set(ALIAS=${CUT(ID,*,2)})
exten = set,n,Set(DB(alias/${CID}_${KEY})=${ALIAS})
;exten = set,n,Playback()
exten = set,n,SayDigits(${ALIAS})
exten = set,n,Playback(vm-savedto)
exten = set,n,SayDigits(${KEY})
exten = set,n,Goto(s,1)

; SWAP 2 CELLS
exten = swap,1,Set(KEY1=${CUT(ID,*,1)})
exten = swap,n,Set(KEY2=${CUT(ID,*,2)})
exten = swap,n,Set(CID=${CALLERID(num)})
exten = swap,n,Set(ALIAS1=${DB(alias/${CID}_${KEY1})})
exten = swap,n,Set(ALIAS2=${DB(alias/${CID}_${KEY2})})
exten = swap,n,Set(DB(alias/${CID}_${KEY1})=${ALIAS2})
exten = swap,n,Set(DB(alias/${CID}_${KEY2})=${ALIAS1})
exten = swap,n,Playback(nomer)
exten = swap,n,SayDigits(${KEY1})
exten = swap,n,Playback(na-nomer)
exten = swap,n,SayDigits(${KEY2})
exten = swap,n,Goto(s,1)

[macro-mmm]
exten = ~~s~~,1,Goto(s,1)

;[tests]
;exten = 1,1,Set(CALLERID(all)="+78123303027" <+78123303027>)
;exten = 1,n,Set(TNUMB) = "+78123019503"
;exten = 1,n,Dial(SIP/ITOO/${TNUMB},120)
;exten = 1,n,Hangup

