#!/usr/bin/perl
# -w

# Simple mailer by PnD! 2009-10-26 for Asterisk PBX project

# Send email to the list of recipients, with proper encodings, may attach some file(s)
# Usage is something like to:
# cat "/dir/msg.txt" ./mailer.pl -f "PBX <ast1@miran.ru>" -t "Дмитрий Святоговов <ds@miran.ru>, Андрей Сулоев <andrey@miran.ru>" -s "Заголовок"

use strict;

use IO::File;     # File IO, part of core
use Getopt::Std;  # command line option processing
use Fcntl qw(:DEFAULT :flock);  # for file locking
use POSIX qw(strftime);         # pretty date formatting
use Time::Local;                # to do reverse of gmtime()
#use Pg;
use Mail::Sender;
#use MIME::Words qw(:all);
use MIME::EncWords qw(:all);
use Getopt::Long;

use Encode qw(encode decode);
use utf8;
binmode(STDIN,':utf8');
binmode(STDOUT,':utf8');




$Mail::Sender::NO_X_MAILER = 1;

#my $gate = 'localhost';
my $gate = 'relay.obit.ru';
my $name = 'MAILER';
#my $charset = 'koi8-r';
my $charset = 'UTF-8';
my $headers;
##############new###################
my $authname = 'voip.robot@obit.ru';
my $authpassword = 'qq2qq3qq4';
##############old###################
my $ctype;
my $from; # mail from:
my $to;   # rcpt to: (may be comma-separated list)
my $h_from; # From: header
my $h_to;   # To: header
my $subj; # Subject:
my $msg;  # Message body, well be readed from STDIN, if empty
my $att;  # Optional attachment (path to file) (may be comma-separated list)
my $help = 0; # Print help and exit

my $res = GetOptions ("gate=s" => \$gate,
                      "name=s" => \$name,
                      "charset=s" => \$charset,
                      "headers=s" => \$headers,
                      "ctype=s" => \$ctype,
                      "from=s" => \$from,
                      "to=s" => \$to,
                      "subject=s" => \$subj,
                      "body=s" => \$msg,
                      "attach=s" => \$att,
                      "help" => \$help);
if ($help)
{
 print "Send email to the list of recipients, with proper encodings, may attach some file(s)\n";
 print "Arguments are:\n";
 print "-ho[st] - smtp gate\n";
 print "-n[ame] - helo string\n";
 print "-f[rom] - mail from: address string\n";
 print "-t[o] - rcpt to: address string (may be comma-separated list)\n";
 print "-s[ubject] - Subject: string\n";
 print "-b[ody] - Body string, will be readed from STDIN otherwise\n";
 print "-a[ttach] - Optional attachment (path to file) (may be comma-separated list)\n";
 print "-c[harset] - Optional charset encoding (koi8-r by default)\n";
 print "-h[elp] - Print this message and exit\n";
 exit;
}
if (! $res)
{
 print "Error parsing command line\n";
 exit 255;
}
unless ($from) # Read from STDIN
{
 print "--from address string must be defined\n";
 exit 255;
}
unless ($to) # Read from STDIN
{
 print "--to address string must be defined\n";
 exit 255;
}

unless ($headers)
{
 $headers = $charset;
}

unless ($ctype)
{
 $ctype = "text/plain";
}

$h_from = encode_mimewords("$from", Charset => $headers, Encoding => 'b', Field => "From");
#$from =~ s/[^a-zA-Z0-9@<>.]*//g;
$from =~ m/<?([a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+)>?/;
$from = "<$1>";

$to =~ s/\%/\,/g;
$h_to = encode_mimewords("$to", Charset => $headers, Encoding => 'b', Field => "To");
#$to =~ s/[^a-zA-Z0-9@<>.,]*//g;

my $TO = $to;
$to = '';
while ($TO =~ m/<?([a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+)>?/p) {
 $to .= "<$1>,";
 $TO = ${^POSTMATCH};
}
$to =~ s/,$//;

unless ($to)
{
 print "--to address is incorrect!\n";
 exit 255;
}


$subj = encode_mimewords("$subj", Charset => $headers, Encoding => 'b', Field => "Subject");


unless ($msg) # Read from STDIN
{
 while (defined(my $line = <STDIN>))
 {
  $msg = $msg.$line;
 }
}

unless ($msg) {$msg=".";}

my $sender = new Mail::Sender {smtp => $gate,
                               client => $name,
                               from => $from,
                               fake_from => $h_from,
                               ctype => $ctype,
                               charset => $charset,
#                               encoding => '8BIT',
                               encoding => 'quoted-printable',
                               b_ctype => $ctype,
                               b_charset => $charset,
#                               b_encoding => '8BIT',
                               b_encoding => 'quoted-printable',
                               on_errors => 'code'};

unless ($sender > 0) {
 print "Error opening connection: [" . $Mail::Sender::Error . "]\n";
 exit 1;
}

if ($att) # Send mail with file
{
 $res = $sender->MailFile({to => $to, fake_to => $h_to, subject => $subj, msg => $msg, file => $att});
} else  # Send plain message
{
 $res = $sender->MailMsg({to => $to, fake_to => $h_to, subject => $subj, msg => $msg});
}

if ($res < 0)
{
 $res = 1;
 print "ERROR SENDING MAIL: " . $Mail::Sender::Error  ."]\n";
} else
{
 $res = 0;
 print "OK from [$from] to [$to]\n";
}

$sender->Close;
exit($res);
